'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebSocket = require('ws');

var CertStreamClient = function () {
    function CertStreamClient(callback) {
        var skipHeartbeats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _classCallCheck(this, CertStreamClient);

        this.context = {};
        this.callback = callback;
        this.skipHeartbeats = skipHeartbeats;
    }

    _createClass(CertStreamClient, [{
        key: 'connect',
        value: function connect() {
            var _this = this;

            this.ws = new WebSocket("wss://certstream.calidog.io/");

            this.ws.on('open', function () {
                console.log("Connection established to certstream! Waiting for messages...");
            });

            this.ws.on('message', function (message) {
                var parsedMessage = JSON.parse(message);

                if (parsedMessage.message_type === "heartbeat" && _this.skipHeartbeats) {
                    return;
                }

                _this.callback(parsedMessage, _this.context);
            });
        }
    }]);

    return CertStreamClient;
}();

exports.default = CertStreamClient;
;
module.exports = exports['default'];